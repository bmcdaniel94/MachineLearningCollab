{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"research for project3","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPXxG5UcZHrrJ8/VSqdrb8n"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"IooPG1J55U4d","colab_type":"code","colab":{}},"source":["from queue import *\n","\n","class Graph:\n","  def __init__(self, graph_repr=None):\n","    if graph_repr is None:\n","      self.vertList={}\n","    else:\n","      self.vertList = graph_repr\n","\n","  def addVertex(self,key):\n","    if key not in self.vertList:\n","      self.vertList[key] = []\n","      return self.vertList\n","\n","  def addEdge(self,frm,to,cost=1):\n","    if frm not in self.vertList:\n","      self.addVertex(frm)\n","    if to not in self.vertList:\n","      self.addVertex(to)\n","    self.vertList[frm].append((to,cost))\n","    return self.vertList\n","\n","  def bfs(self,start):\n","    if start not in self.vertList:\n","      return 'error - start node not in graph'\n","\n","    visited={}\n","    for i in self.vertList:\n","      visited[i]=False\n","\n","    q = Queue()\n","    q.enqueue(start)\n","    visited[start]=True\n","\n","    bfs_output=[]\n","\n","    while q:\n","      for i in sorted((self.vertList[str(q.peek)])):\n","        if type(i) == tuple:\n","          if not visited[i[0]]:\n","            q.enqueue(i[0])\n","            visited[i[0]] = True\n","\n","        elif not visited[i]:\n","          q.enqueue(i)\n","          visited[i] = True\n","\n","      bfs_output.append(q.dequeue())\n","\n","    return bfs_output\n","\n","\n","def main():\n","  g1 = {'A': ['B','E','F'],\n","            'B': ['A','C','F'],\n","            'C': ['B','D','G'],\n","            'D': ['G'],\n","            'E': ['A','F','I'],\n","            'F': ['A','B','E'],\n","            'G': ['C','D','J'],\n","            'I': ['E','F','J','M'],\n","            'J': ['I','G'],\n","            'M': ['I','N'],\n","            'N': ['M'],\n","            'H': ['K','L'],\n","            'K': ['H','L','O'],\n","            'L': ['H','K','P'],\n","            'O': ['K'],\n","            'P': ['L']}\n","\n","  g = Graph(g1)\n","\n","  #initialize the graph\n","  \n","\n","  print(g.bfs('A'))\n","\n","if __name__ == \"__main__\":\n","    main()"],"execution_count":0,"outputs":[]}]}